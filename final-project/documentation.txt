Bookstore App

-provjerimo verziju Nodejs-a u terminalu sa komandom node -v
-kreiramo folder final-project sa komandom u terminalu mkdir final-project
-pristupimo folderu sa komandom cd final-project
-ukucamo komandu npm init da inicijaliziramo package.json fajl
-kreiramo .gitignore fajl da sprijecimo push node_modules foldera i .env fajla na Github
-kreiramo .env i example .env fajl
-instaliramo pakete Nodemon, Express, Mongoose, Body Parser, Dotenv
-kreiramo index.js fajl
-inicijaliziramo Nodejs Express aplikaciju
-u package.json fajl dodamo property "start": "nodemon index.js"
-dodamo property "type": "module"
-kreiramo foldere controllers, models, routes
-u folderu controllers kreiramo bookController.js fajl
-u folderu models kreiramo Book.js fajl
-u folderu routes kreiramo bookRoutes.js fajl
-u bookController.js fajlu kreiramo pet funkcija: getAllBooks, createBook, getBookById, updateBook, deleteBook, buyBook 
-u Book.js fajlu kreiramo Mongoose model Book
-u bookRoutes.js fajlu kreiramo rute sa HTTP metodama GET, POST, PUT i DELETE 
-u index.js fajlu kreiramo funkciju connectToDb() 
-kreiramo metodu app.use('/api/books', bookRoutes)
-kreiramo metodu app.use(bodyParser.json())
-importujemo paket Dotenv import 'dotenv/config' da mozemo koristiti varijable iz .env fajla
-u folderu controllers kreiramo fajlove authController.js i userController.js
-u folderu models kreiramo User.js fajl
-u authController.js fajlu kreiramo funkcije: registerUser i loginUser
-u userController.js fajlu kreiramo funkcije: getAllUsers, getUserById, updateUser, deleteUser
-u terminalu instaliramo bakete Bcrypt i Json Web Token
-u folderu routes kreiramo fajlove authRoutes.js i userRoutes.js
-u authRoutes.js fajl importujemo funkcije: registerUser i loginUser
-kreiramo rute sa metodom POST za funkcije registerUser i loginUser
-u userRoutes.js fajl importujemo funkcije: getAllUsers, getUserById, updateUser, deleteUser
-kreiramo rute sa metodoma GET, PUT i DELETE za importovane funkcije
-u index.js fajl importujemo rute authRoutes i userRoutes
-kreiramo dvije metode app.use('/api/auth', authRoutes) i app.use('/api/users', userRoutes)
-u .env fajlu je potrebno kreirati varijablu JWT_SECRET
-u example.env fajlu je dodana varijabla JWT_SECRET kao primjer da ju je potrebno dodati u projekt
-kreiran folder middlewares i authMiddleware.js fajl
-u authMiddleware.js fajlu kreiramo funkciju i eksportujemo kao default funkciju verify()
-u fajlove userRoutes.js i authRoutes.js importujemo funkciju verify kao funkciju authMiddleware
-u .env fajlu kreiramo varijablu MONGO_URI
-u index.js fajlu kreiramo varijablu const MONGO_URI
-u terminalu instaliramo paket Colors sa komandom npm i colors
-kreiramo foldere config i helpers
-u folderu config kreiramo connectToDb.js fajl za povezivanje za Mongo DB
-u folderu helpers kreiramo jwtKey.js fajl za generisanje jwt tokena 
-u index.js fajl importujemo funkciju connectToDb 
